services:

  backend:
    build:
      context: ./flask_backend
    hostname: flask_back
    environment:
      CONFIG_NAME: ProductionConfig
      SQLALCHEMY_DATABASE_URI: postgresql://userdb:userdbpassword@dbpostgres:5432/db_flask_blog
      api_sk: 8e955tutodjodu50ego
      ADMIN_EMAIL: admin@test.ru
      ADMIN_PASSWD: paranoiYa1234
      PORT: 5050
    depends_on:
      database:
        condition: service_healthy
    restart: always
    # при первом запуске необходимо выполнить команды flask db upgrade и flask create-admin для выполнения миграциий и создания админа:
    # command: flask db upgrade && flask create-admin && gunicorn -w 4 -b 0.0.0.0:5050 run:gunicorn_app
    # при последующих запусках эту строку заккоментировать

  frontend:
    build:
      context: ./flask_front
    environment:
      CONFIG_NAME: ProductionConfig
      sk: dji8uyejbdigjy9984utgdl
      API_HOST: flask_back
      API_PORT: 5050
      API_TIMEOUT: 10
      PORT: 5000
    ports:
      - 80:5000
    depends_on:
      - backend
    restart: always

  database:
    image: postgres:14.8-alpine
    hostname: dbpostgres
    volumes:
      - pgs_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass123wword
      POSTGRES_DB: db_flask_blog
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  pgs_data:
